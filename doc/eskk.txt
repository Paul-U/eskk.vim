*eskk.txt* *eskk*

Author:
  tyru <tyru.exe@gmail.com>
Version: X.Y.Z
License: Under the same license as Vim itself (see :help license)

==============================================================================
CONTENTS						*eskk-contents*

Introduction		|eskk-introduction|
Interface			|eskk-interface|
  Keymappings		|eskk-keymappings|
  Variables			|eskk-variables|
  Commands			|eskk-commands|
  Functions			|eskk-functions|
Modes				|eskk-modes|
Phases				|eskk-phases|
Completion			|eskk-completion|
FAQ					|eskk-faq|
TODO				|eskk-todo|
Changelog			|eskk-changelog|


==============================================================================
INTRODUCTION						*eskk-introduction* {{{

|eskk| aims to provide powerful input method platform in Vim.

We also maintain skk.vim (|skk|, if you have installed).
But we decided to create eskk,
because skk.vim is mostly unmaintainable
due to Vim 6 compatible code.

eskk provides enhanced and extendable platform
such as multibyte text in Vim.

}}}
==============================================================================
INTERFACE				*eskk-interface* {{{
------------------------------------------------------------------------------
KEYMAPPINGS					*eskk-keymappings* {{{

<Plug>(eskk:enable) (icl)		*<Plug>(eskk:enable)*
<Plug>(eskk:disable) (icl)		*<Plug>(eskk:disable)*
<Plug>(eskk:toggle) (icl)		*<Plug>(eskk:toggle)*

	Keymappings version of |eskk#enable()|, |eskk#disable()|, |eskk#toggle()|.


<Plug>(eskk:save-dictionary) (n)		*<Plug>(eskk:save-dictionary)*

	Save SKK dictionary if it's modified.
	(one or more new words are registered)
	This is keymapping version of|:EskkUpdateDictionary|,  |eskk#update_dictionary()|.

<Plug>(eskk:alpha-t) (n)		*<Plug>(eskk:alpha-t)*
<Plug>(eskk:alpha-f) (n)		*<Plug>(eskk:alpha-f)*
<Plug>(eskk:alpha-T) (n)		*<Plug>(eskk:alpha-T)*
<Plug>(eskk:alpha-F) (n)		*<Plug>(eskk:alpha-F)*
<Plug>(eskk:alpha-,) (n)		*<Plug>(eskk:alpha-,)*
<Plug>(eskk:alpha-;) (n)		*<Plug>(eskk:alpha-;)*

	Vim script implementation of |t|, |f|, |T|, |F|, |,|, |;|.
	Why I implemented this in Vim script
	is that |language-mapping| is enabled for above commands' arguments
	when lang-mode (see |i_CTRL-^|) is on.

	If you want those behaviors in |Normal-mode|, you can use them.
	 >
    function! ToggleEskkMap(enable)
        if a:enable
            nmap <buffer> t <Plug>(eskk:alpha-t)
            nmap <buffer> f <Plug>(eskk:alpha-f)
            nmap <buffer> T <Plug>(eskk:alpha-T)
            nmap <buffer> F <Plug>(eskk:alpha-F)
            nmap <buffer> , <Plug>(eskk:alpha-,)
            nmap <buffer> ; <Plug>(eskk:alpha-;)
        else
            nunmap <buffer> t
            nunmap <buffer> f
            nunmap <buffer> T
            nunmap <buffer> F
            nunmap <buffer> ,
            nunmap <buffer> ;
        endif
    endfunction

    call eskk#register_event(
    \   'enable-im',
    \   'ToggleEskkMap',
    \   [1],
    \)
    call eskk#register_event(
    \   'disable-im',
    \   'ToggleEskkMap',
    \   [0],
    \)
<
	Paste above code in your .vimrc.
	That will create <buffer> keymappings only when eskk is enabled,
	and delete those keymappings when eskk is disabled.


Default keymappings				*eskk-default-keymappings*
----------------------
<C-j> => <Plug>(eskk:toggle)   (icl)

}}}
------------------------------------------------------------------------------
VARIABLES					*eskk-variables* {{{


Directory that eskk creates
------------------------------

g:eskk#directory			*g:eskk#directory*
							(Default: "~/.eskk")
	Under this directory,
	misc. directories/files about eskk
	will be created.

SKK dicitionary
------------------

g:eskk#dictionary			*g:eskk#dictionary*
							(Default: See below)
	User SKK dictionary's information.

	This variable value is:
		If user defined:
			String: >
				let g:eskk#dictionary = {
				\	'path': {value},
				\	'sorted': 0,
				\	'encoding': 'utf-8',
				\}
<			Dictionary:
				Keep user settings
				and extend missing keys of {value}
				by "not defined" value.
		not defined: >
				let g:eskk#dictionary = {
				\	'path': "~/.skk-jisyo",
				\	'sorted': 0,
				\	'encoding': 'utf-8',
				\}
<

g:eskk#large_dictionary		*g:eskk#large_dictionary*
							(Default: See below)
	System SKK dictionary's information.

	This variable value is:
		If user defined:
			String: >
				let g:eskk#large_dictionary = {
				\	'path': {value},
				\	'sorted': 0,
				\	'encoding': 'euc-jp',
				\}
<			Dictionary:
				Keep user settings
				and extend missing keys of {value}
				by "not defined" value.
		not defined: >
				let g:eskk#large_dictionary = {
				\	'path': "/usr/local/share/SKK/SKK-JISYO",
				\	'sorted': 0,
				\	'encoding': 'euc-jp',
				\}

g:eskk#backup_dictionary	*g:eskk#backup_dictionary*
							(Default: g:eskk#dictionary.path . ".BAK")
	(TODO)

g:eskk#auto_save_dictionary_at_exit		*g:eskk#auto_save_dictionary_at_exit*
							(Default: 1)
	If true and one or more words are registered in SKK dictionary,
	Automatically save its modification to |g:eskk#dictionary|
	when Vim exits (|VimLeave|).


Some kanji conversion keys, Annotation
-----------------------------------------

g:eskk#select_cand_keys		*g:eskk#select_cand_keys*
							(Default: "asdfjkl")
	Keys to select candidates at |eskk-select-candidates|.
	This value is String consisted of each character of keys.

g:eskk#show_candidates_count	*g:eskk#show_candidates_count*
							(Default: 4)
	At |eskk-henkan-select-phase|,
	If the number user typed the henkan key exceeded
	this number,
	Switch to |eskk-select-candidates|.

g:eskk#show_annotation			*g:eskk#show_annotation*
							(Default: 0)
	If true, show annotation at |eskk-select-candidates|.


Keymappings
-----------

g:eskk#no_default_mappings		*g:eskk#no_default_mappings*
							(Default: 0)
	If true, eskk does not prepare any |eskk-default-keymappings| for user.

g:eskk#dont_map_default_if_already_mapped	*g:eskk#dont_map_default_if_already_mapped*
							(Default: 1)
	If true and keys are already mapped, do not map default keys.

g:eskk#mapped_keys				*g:eskk#mapped_keys*
							(Default: EskkDefaultMappedKeys())
	List of String consisted of |key-notation| (not keycode).
	See |EskkDefaultMappedKeys()|'s value.
	Note that you have to write "<Bar>" when you write "|".


Mode
-------

g:eskk#initial_mode			*g:eskk#initial_mode*
							(Default: "hira")
	When |eskk#enable()| is called,
	eskk sets this mode to initial value.

g:eskk#statusline_mode_strings	*g:eskk#statusline_mode_strings*
							(Default: See below)
	Current mode's strings at |'statusline'|.
	Statusline string of modes.
	This changes |eskk#get_stl()|'s return value.

	Default value is: >
	let g:eskk#statusline_mode_strings = {
	\	'hira': 'あ',
	\	'kata': 'ア',
	\	'ascii': 'aA',
	\	'zenei': 'ａ',
	\	'hankata': 'ｧｱ',
	\	'abbrev': 'aあ'
	\}
<
g:eskk#mode_use_tables			*g:eskk#mode_use_tables*
							(Default: See below)
	Keys are modes.
	Values are table names.
	See |eskk-table| to create own table.

	Default value is: >
	let g:eskk#mode_use_tables = {
	\	'hira': 'rom_to_hira',
	\	'kata': 'rom_to_kata',
	\	'zenei': 'rom_to_zenei',
	\	'hankata': 'rom_to_hankata'
	\}
<

Table
--------

g:eskk#cache_table_map			*g:eskk#cache_table_map*
							(Default: 1)

g:eskk#cache_table_candidates			*g:eskk#cache_table_candidates*
							(Default: 1)


Markers
----------

g:eskk#marker_henkan			*g:eskk#marker_henkan*
							(Default: "▽")

g:eskk#marker_okuri			*g:eskk#marker_okuri*
							(Default: "*")

g:eskk#marker_henkan_select			*g:eskk#marker_henkan_select*
							(Default: "▼")

g:eskk#marker_jisyo_touroku			*g:eskk#marker_jisyo_touroku*
							(Default: "?")
	(TODO)

g:eskk#marker_popup			*g:eskk#marker_popup*
							(Default: "#")


Completion
-------------

g:eskk#enable_completion		*g:eskk#enable_completion*
							(Default: 0)

g:eskk#max_candidates			*g:eskk#max_candidates*
							(Default: 10)

g:eskk#compl_enter_send_keys			*g:eskk#compl_enter_send_keys*
							(Default: ["<CR>"])


Cursor color
---------------

g:eskk#use_color_cursor			*g:eskk#use_color_cursor*
							(Default: 1)

g:eskk#cursor_color			*g:eskk#cursor_color*
							(Default: See below)
	Default value is: >
    " ascii: ivory4:#8b8b83, gray:#bebebe
    " hira: coral4:#8b3e2f, pink:#ffc0cb
    " kata: forestgreen:#228b22, green:#00ff00
    " abbrev: royalblue:#4169e1
    " zenei: gold:#ffd700
    let g:eskk#cursor_color = {
    \   'ascii': ['#8b8b83', '#bebebe'],
    \   'hira': ['#8b3e2f', '#ffc0cb'],
    \   'kata': ['#228b22', '#00ff00'],
    \   'abbrev': '#4169e1',
    \   'zenei': '#ffd700',
    \}
<

Misc.
--------

g:eskk#egg_like_newline			*g:eskk#egg_like_newline*
							(Default: 0)

g:eskk#keep_state			*g:eskk#keep_state*
							(Default: 0)

g:eskk#keep_state_beyond_buffer		*g:eskk#keep_state_beyond_buffer*
							(Default: 0)

g:eskk#revert_henkan_style			*g:eskk#revert_henkan_style*
							(Default: "okuri")

g:eskk#delete_implies_kakutei			*g:eskk#delete_implies_kakutei*
							(Default: 0)

g:eskk#rom_input_style			*g:eskk#rom_input_style*
							(Default: "skk")

g:eskk#auto_henkan_at_okuri_match			*g:eskk#auto_henkan_at_okuri_match*
							(Default: 1)

g:eskk#set_undo_point				*g:eskk#set_undo_point*
							(Default: See below)
	Default value is: >
	let g:eskk#set_undo_point = {
	\	'sticky': 1,
	\	'kakutei': 1,
	\}
<
g:eskk#context_control				*g:eskk#context_control*
							(Default: [])

g:eskk#fix_extra_okuri				*g:eskk#fix_extra_okuri*
							(Default: 1)
	 >
	▽おくr {henkan-key}
<
	 >
	▽おく*r
<
g:eskk#ignore_continuous_sticky		*g:eskk#ignore_continuous_sticky*
							(Default: 1)

g:eskk#convert_at_exact_match		*g:eskk#convert_at_exact_match*
							(Default: 0)

g:eskk#kata_convert_to_hira_at_henkan	*g:eskk#kata_convert_to_hira_at_henkan*
							(Default: 1)
	In |eskk-kata-mode|, Convert hiragana to katakana
	before looking up SKK dictionary.
	Therefore, eskk will find the candidates in SKK dictionary.
	(Because SKK dictionary only contains pairs of hiragana and candidates)

g:eskk#kata_convert_to_hira_at_completion	*g:eskk#kata_convert_to_hira_at_completion*
							(Default: 1)
	Same as |g:eskk#kata_convert_to_hira_at_henkan|,
	But this works at |eskk-completion|.





Debugging variables
----------------------

g:eskk#debug			*g:eskk#debug*
						(Default: 0)
	If true, output debugging messages to command-line or file.
	|g:eskk#debug_out| changes which to output.

g:eskk#debug_wait_ms	*g:eskk#debug_wait_ms*
						(Default: 0)
	If this variable is greater than 0,
	Do |:sleep| for this value (millisecond).

g:eskk#debug_out		*g:eskk#debug_out*
						(Default: "file")
	The value is "file" or "cmdline".
	If "file", log file is created at: >
	{g:eskk#directory}/log/debug.log
<
	If "cmdline", output to command-line.

g:eskk#version			*g:eskk#version*
	Current version number string.

}}}
------------------------------------------------------------------------------
COMMANDS					*eskk-commands* {{{

:EskkMap						*:EskkMap*
:EskkForgetRegisteredWords		*:EskkForgetRegisteredWords*
:EskkUpdateDictionary			*:EskkUpdateDictionary*

}}}
------------------------------------------------------------------------------
FUNCTIONS					*eskk-functions* {{{

eskk#enable()			*eskk#enable()*
eskk#disable()			*eskk#disable()*
eskk#toggle()			*eskk#toggle()*
	Enable, Disable, Toggle eskk.
	This works also in |Normal-mode|, and of course |mapmode-ic|.

eskk#is_enabled()			*eskk#is_enabled()*
	Return true if eskk was enabled, false if disabled,

eskk#get_mode()			*eskk#get_mode()*
	Return String of current mode.
	NOTE: This may return invalid value if |eskk#is_enabled()| returns false.

eskk#update_dictionary()		*eskk#update_dictionary()*
	See |:EskkUpdateDictionary|.

EskkDefaultMappedKeys()			*EskkDefaultMappedKeys()*
	Default value of |g:eskk#mapped_keys|.

}}}
}}}
==============================================================================
MODES					*eskk-modes* {{{

------------------------------------------------------------------------------
HIRA MODE				*eskk-hira-mode* {{{
}}}
------------------------------------------------------------------------------
KATA MODE				*eskk-kata-mode* {{{
}}}
------------------------------------------------------------------------------
HANKATA MODE				*eskk-hankata-mode* {{{
}}}
------------------------------------------------------------------------------
ABBREV MODE				*eskk-abbrev-mode* {{{
}}}
------------------------------------------------------------------------------
ASCII MODE				*eskk-ascii-mode* {{{
}}}
------------------------------------------------------------------------------
ZENEI MODE				*eskk-zenei-mode* {{{
}}}

}}}
==============================================================================
PHASES					*eskk-phases* {{{

------------------------------------------------------------------------------
NORMAL PHASE			*eskk-normal-phase* {{{
}}}
------------------------------------------------------------------------------
HENKAN PHASE			*eskk-henkan-phase* {{{
}}}
------------------------------------------------------------------------------
OKURI PHASE			*eskk-okuri-phase* {{{
}}}
------------------------------------------------------------------------------
HENKAN SELECT PHASE			*eskk-henkan-select-phase* {{{
}}}

}}}
==============================================================================
COMPLETION				*eskk-completion* {{{
}}}
==============================================================================
FAQ					*eskk-faq* {{{

									*eskk-tfTF*
Q. I can't use |t|, |f|, |T|, |F| commands when eskk is enabled.
A. See |<Plug>(eskk:alpha-t)| and similar keymappings.

}}}
==============================================================================
TODO						*eskk-todo* {{{
}}}
==============================================================================
CHANGELOG						*eskk-changelog* {{{

0.0.0:
- 

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:noet:fdm=marker:fen
